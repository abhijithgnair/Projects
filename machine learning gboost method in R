library(caret)
library(tidyverse)
library(skimr)
library(lubridate)
library(glmnet)
library(Matrix)
library(ROCR)
library(rpart)
library(rpart.plot)
# read file
FEx_data <- read.csv(file = "FastEats_data.csv", header=T)
#removed DT-Cust to import it later after modification
FE_data<-select(FEx_data, -Dt_Customer)
# working for Na values in income values
preProcess_missingdata_model <- preProcess(FE_data, method='medianImpute')
FE_data <-predict(preProcess_missingdata_model,newdata=FE_data)
FE_dummy <- model.matrix(Response~ ., data = FE_data)
FE_dummy<- data.frame(FE_dummy[,-1])
FE_data <- cbind(Response=FE_data$Response, FE_dummy)
FEx_data_dates<-select(FEx_data, Dt_Customer)
FEx_data_dates1<-strsplit(FEx_data_dates$Dt_Customer, split = "/")
a<-data.frame(FEx_data_dates1)
b<-t(a)
b<-data.frame(b)
FE_data<-cbind(b$X3,FE_data)
colnames(FE_data)[colnames(FE_data) == 'b$X3'] <- 'Year'
FE_data$Year<-as.numeric(FE_data$Year)
FE_data$Response<-as.factor(FE_data$Response)
levels(FE_data$Response)<-c("Reject","Accept")
#FE_data<-mutate(FE_data,MarriedOthers=Marital_StatusAlone+Marital_StatusSingle+Marital_StatusYOLO)
#FE_data<-select(FE_data, -Marital_StatusAlone,-Marital_StatusSingle,-Marital_StatusYOLO,-ID)
set.seed(62)
index <- createDataPartition(FE_data$Response, p = .8,list = FALSE)
FE_train <-FE_data[index,]
FE_test <- FE_data[-index,]
model_gbm <- train(Response ~ .,
                   data = FE_train,
                   method = "xgbTree",
                   trControl =trainControl(method = "cv", 
                                           number = 5,
                   classProbs = TRUE,
                   #Evaluate performance using the following function
                   summaryFunction = twoClassSummary),
                    metric="ROC",verbose=FALSE)
model_gbm
plot(model_gbm)
model_gbm$bestTune
plot(varImp(model_gbm))
FE_predictions<- predict(model_gbm, FE_test)
bc_prob<- predict(model_gbm, FE_test, type="prob")
pred = prediction(bc_prob[,2], FE_test$Response,label.ordering =c("Reject","Accept")) 
perf = performance(pred, "tpr", "fpr")
plot(perf, colorize=TRUE)
slot(performance(pred, "auc"), "y.values")[[1]]

#Xdata<-as.matrix(select(FE_train,-Response)) 
# change data to matrix for plots
# Crunch SHAP values
xgb_grid <- expand.grid(
  nrounds = c(50,200),
  eta = c(0.025, 0.05, 0.1),
  max_depth = c(2, 3, 4, 5),
  gamma = 0,
  colsample_bytree = 1,
  min_child_weight = 1,
  subsample = 1)
model_gbm_tune <- train(Response~.,data = FE_train,
                        method = "xgbTree",
                        trControl =trainControl(method = "cv",number = 5),
                        # provide a grid of parameters
                        tuneGrid = xgb_grid,
                        verbose=FALSE)
plot(model_gbm_tune)
model_gbm_tune
plot(varImp(model_gbm_tune))
model_gbm$bestTune
plot(varImp(model_gbm_tune))
FE_predictions<- predict(model_gbm_tune, FE_test)
bc_prob<- predict(model_gbm_tune, FE_test, type="prob")
pred = prediction(bc_prob[,2], FE_test$Response,label.ordering =c("Reject","Accept")) 
perf = performance(pred, "tpr", "fpr")
plot(perf, colorize=TRUE)
slot(performance(pred, "auc"), "y.values")[[1]]


